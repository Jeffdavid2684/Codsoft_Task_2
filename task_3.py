# -*- coding: utf-8 -*-
"""Task 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XdVGVXo-fZBID6JWZFSkXxSDnJ-F1m8o
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load dataset
iris = load_iris()
data = pd.DataFrame(data= np.c_[iris['data'], iris['target']],
                    columns= iris['feature_names'] + ['target'])
data['target'] = data['target'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})
#print(data.head())

sns.pairplot(data, hue='target', markers=["o", "s", "D"])
plt.show()

# Calculate correlation on numerical columns only
numerical_data = data.drop('target', axis=1)  # Drop the non-numerical 'target' column

# Heatmap of correlation matrix
plt.figure(figsize=(10, 7))
sns.heatmap(numerical_data.corr(), annot=True, cmap='coolwarm') # Use numerical_data instead of data
plt.show()

X = data.iloc[:, :-1]
y = data.iloc[:, -1]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the model
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))